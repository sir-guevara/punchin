generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Organization {
  id          String     @id @default(uuid()) 
  name        String     
  logo        String?
  locations   Location[]
  employees   Profile[] 
  schedules   OrganizationSchedule[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Define the Employee model
model Profile {
  id           String     @id @default(uuid())   
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String 
  shifts       Shift[]
  role Role @default(STAFF)
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Define the User model
model User {
  id            String     @id @default(uuid())
  email        String     @unique 
  phone        String @unique
  firstName    String    
  lastName     String  
  profile Profile?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Define the Location model
model Location {
  id          String          @id @default(uuid()) 
  name        String         
  address     String          
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  shifts Shift[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

}

// Define the Shift model
model Shift {
  id          String          @id @default(uuid()) 
  title       String       
  status      String   
  startTime   DateTime        
  endTime     DateTime       
  location    Location     @relation(fields: [locationId], references: [id])
  locationId String    @unique
  organization OrganizationSchedule @relation(fields: [organizationScheduleId], references: [id])
  organizationScheduleId String @unique
  employee  Profile @relation(fields: [profileId], references: [id])
  profileId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Define the OrganizationSchedule model
model OrganizationSchedule {
  id          String          @id @default(uuid()) 
  date        DateTime       
  shifts      Shift[]         
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}


enum Role {
  ADMIN
  MANAGER
  STAFF
}